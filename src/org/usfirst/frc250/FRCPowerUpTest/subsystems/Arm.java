// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc250.FRCPowerUpTest.subsystems;

import org.usfirst.frc250.FRCPowerUpTest.Robot;
import org.usfirst.frc250.FRCPowerUpTest.RobotMap;
import org.usfirst.frc250.FRCPowerUpTest.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import com.ctre.phoenix.motorcontrol.ControlMode;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Arm extends Subsystem {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	private final WPI_TalonSRX armMotor1 = RobotMap.armArmMotor1;
	private final WPI_VictorSPX armMotor2 = RobotMap.armArmMotor2;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	int armTargetPos;
	double motor1PeakCurrent = 0;
	double motor2PeakCurrent = 0;
	double motor2PeakOutputPeak = 0;
	
	@Override
	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());	
	}

	@Override
	public void periodic() {
		// Put code here to be run every loop
		SmartDashboard.putNumber("Arm Position", armMotor1.getSelectedSensorPosition(0));
		SmartDashboard.putNumber("Talon Output", armMotor1.getMotorOutputPercent());
		SmartDashboard.putNumber("Arm Target Position", armTargetPos);
	
		// Track current current and update peak
		double arm1Current = armMotor1.getOutputCurrent();
		double arm2Current = armMotor2.getOutputCurrent();
		if (arm1Current > motor1PeakCurrent){motor1PeakCurrent = arm1Current;}
		if (arm2Current > motor2PeakCurrent){motor2PeakCurrent = arm2Current;}
	}

	// Put methods for controlling this subsystem
	// here. Call these from Commands.
	public void setArmSpeed(double speed) {
		if (speed >= -1 && speed <= 1) {
			// armMotor1.set(speed);
			armMotor1.set(ControlMode.PercentOutput, speed);
		}
	}

	public int getCurrentRawPosition() {
		return armMotor1.getSelectedSensorPosition(0);
	}

	public void setArmTargetPosition(int position) {
		armMotor1.set(ControlMode.MotionMagic, position);
		armTargetPos = position;
	}
    public int getArmTargetPosition(){
    	return armMotor1.getClosedLoopTarget(0);
    }

	public boolean isAtTargets() {
		int Delta = Math.abs(Math.abs(getArmTargetPosition()) - Math.abs(getCurrentRawPosition()));
		int threshold = Robot.prefs2.getInt("Arm MM Target Threshold");

		if (Delta <= threshold) {
			return true;
		} else {
			return false;
		}
	}
}
