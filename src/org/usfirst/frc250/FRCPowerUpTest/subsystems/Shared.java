// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc250.FRCPowerUpTest.subsystems;

import org.usfirst.frc250.FRCPowerUpTest.MatchData;
import org.usfirst.frc250.FRCPowerUpTest.Robot;
import org.usfirst.frc250.FRCPowerUpTest.RobotMap;
import org.usfirst.frc250.FRCPowerUpTest.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.PowerDistributionPanel;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Shared extends Subsystem {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Compressor compressor = RobotMap.sharedCompressor;
    private final PowerDistributionPanel powerDistributionPanel = RobotMap.sharedPowerDistributionPanel;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public enum RobotTravelDirection {
		Forward, Backward, Stopped, Unknown
	}

	private RobotTravelDirection robotDirection = RobotTravelDirection.Unknown;

	private Boolean isFrontCameraActive = true;

	@Override
	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
		compressor.setClosedLoopControl(true);
	}

	@Override
	public void periodic() {
		// Put code here to be run every loop

		// update robot operational direction
		double leftSpeed = Robot.driveTrain.getCurrentSpeed()[0];
		double rightSpeed = Robot.driveTrain.getCurrentSpeed()[1];

		if (leftSpeed == 0 && rightSpeed == 0) {
			robotDirection = RobotTravelDirection.Stopped;
		} else if (leftSpeed <= 0 && rightSpeed <= 0) {
			robotDirection = RobotTravelDirection.Backward;
		} else if (leftSpeed >= 0 && rightSpeed >= 0) {
			robotDirection = RobotTravelDirection.Forward;
		} else {
			robotDirection = RobotTravelDirection.Unknown;
		}

		// Automatically update displayed camera based on robot travel
		// direction.
		if (isFrontCameraActive && robotDirection == RobotTravelDirection.Backward) {
			isFrontCameraActive = false;
		} else if (isFrontCameraActive == false && robotDirection == RobotTravelDirection.Forward) {
			isFrontCameraActive = true;
		}
	}

	// Put methods for controlling this subsystem
	// here. Call these from Commands.
	public RobotTravelDirection getRobotTravelDirection() {
		return robotDirection;
	}

	public boolean isFrontCameraActive() {
		return isFrontCameraActive;
	}
}
